// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spectrum.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "spectrum.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* Spectrum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Spectrum_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_spectrum_2eproto() {
  protobuf_AddDesc_spectrum_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "spectrum.proto");
  GOOGLE_CHECK(file != NULL);
  Spectrum_descriptor_ = file->message_type(0);
  static const int Spectrum_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spectrum, peak_m_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spectrum, peak_intensity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spectrum, peak_m_z_denominator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spectrum, peak_intensity_denominator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spectrum, spectrum_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spectrum, precursor_m_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spectrum, rtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spectrum, charge_state_),
  };
  Spectrum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Spectrum_descriptor_,
      Spectrum::default_instance_,
      Spectrum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spectrum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spectrum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Spectrum));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_spectrum_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Spectrum_descriptor_, &Spectrum::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_spectrum_2eproto() {
  delete Spectrum::default_instance_;
  delete Spectrum_reflection_;
}

void protobuf_AddDesc_spectrum_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016spectrum.proto\022\002pb\"\327\001\n\010Spectrum\022\024\n\010pea"
    "k_m_z\030\001 \003(\003B\002\020\001\022\032\n\016peak_intensity\030\002 \003(\003B"
    "\002\020\001\022\034\n\024peak_m_z_denominator\030\003 \001(\005\022\"\n\032pea"
    "k_intensity_denominator\030\004 \001(\005\022\027\n\017spectru"
    "m_number\030\005 \001(\005\022\025\n\rprecursor_m_z\030\006 \001(\001\022\r\n"
    "\005rtime\030\010 \001(\001\022\030\n\014charge_state\030\007 \003(\005B\002\020\001B\002"
    "H\001", 242);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "spectrum.proto", &protobuf_RegisterTypes);
  Spectrum::default_instance_ = new Spectrum();
  Spectrum::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_spectrum_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_spectrum_2eproto {
  StaticDescriptorInitializer_spectrum_2eproto() {
    protobuf_AddDesc_spectrum_2eproto();
  }
} static_descriptor_initializer_spectrum_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Spectrum::kPeakMZFieldNumber;
const int Spectrum::kPeakIntensityFieldNumber;
const int Spectrum::kPeakMZDenominatorFieldNumber;
const int Spectrum::kPeakIntensityDenominatorFieldNumber;
const int Spectrum::kSpectrumNumberFieldNumber;
const int Spectrum::kPrecursorMZFieldNumber;
const int Spectrum::kRtimeFieldNumber;
const int Spectrum::kChargeStateFieldNumber;
#endif  // !_MSC_VER

Spectrum::Spectrum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Spectrum::InitAsDefaultInstance() {
}

Spectrum::Spectrum(const Spectrum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Spectrum::SharedCtor() {
  _cached_size_ = 0;
  peak_m_z_denominator_ = 0;
  peak_intensity_denominator_ = 0;
  spectrum_number_ = 0;
  precursor_m_z_ = 0;
  rtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Spectrum::~Spectrum() {
  SharedDtor();
}

void Spectrum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Spectrum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Spectrum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Spectrum_descriptor_;
}

const Spectrum& Spectrum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spectrum_2eproto();
  return *default_instance_;
}

Spectrum* Spectrum::default_instance_ = NULL;

Spectrum* Spectrum::New() const {
  return new Spectrum;
}

void Spectrum::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    peak_m_z_denominator_ = 0;
    peak_intensity_denominator_ = 0;
    spectrum_number_ = 0;
    precursor_m_z_ = 0;
    rtime_ = 0;
  }
  peak_m_z_.Clear();
  peak_intensity_.Clear();
  charge_state_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Spectrum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 peak_m_z = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_peak_m_z())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10, input, this->mutable_peak_m_z())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_peak_intensity;
        break;
      }

      // repeated int64 peak_intensity = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_peak_intensity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_peak_intensity())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 18, input, this->mutable_peak_intensity())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_peak_m_z_denominator;
        break;
      }

      // optional int32 peak_m_z_denominator = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_peak_m_z_denominator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &peak_m_z_denominator_)));
          set_has_peak_m_z_denominator();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_peak_intensity_denominator;
        break;
      }

      // optional int32 peak_intensity_denominator = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_peak_intensity_denominator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &peak_intensity_denominator_)));
          set_has_peak_intensity_denominator();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_spectrum_number;
        break;
      }

      // optional int32 spectrum_number = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spectrum_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spectrum_number_)));
          set_has_spectrum_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_precursor_m_z;
        break;
      }

      // optional double precursor_m_z = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_precursor_m_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &precursor_m_z_)));
          set_has_precursor_m_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_charge_state;
        break;
      }

      // repeated int32 charge_state = 7 [packed = true];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charge_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_charge_state())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 58, input, this->mutable_charge_state())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_rtime;
        break;
      }

      // optional double rtime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_rtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rtime_)));
          set_has_rtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Spectrum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 peak_m_z = 1 [packed = true];
  if (this->peak_m_z_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_peak_m_z_cached_byte_size_);
  }
  for (int i = 0; i < this->peak_m_z_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->peak_m_z(i), output);
  }

  // repeated int64 peak_intensity = 2 [packed = true];
  if (this->peak_intensity_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_peak_intensity_cached_byte_size_);
  }
  for (int i = 0; i < this->peak_intensity_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->peak_intensity(i), output);
  }

  // optional int32 peak_m_z_denominator = 3;
  if (has_peak_m_z_denominator()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->peak_m_z_denominator(), output);
  }

  // optional int32 peak_intensity_denominator = 4;
  if (has_peak_intensity_denominator()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->peak_intensity_denominator(), output);
  }

  // optional int32 spectrum_number = 5;
  if (has_spectrum_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->spectrum_number(), output);
  }

  // optional double precursor_m_z = 6;
  if (has_precursor_m_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->precursor_m_z(), output);
  }

  // repeated int32 charge_state = 7 [packed = true];
  if (this->charge_state_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_charge_state_cached_byte_size_);
  }
  for (int i = 0; i < this->charge_state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->charge_state(i), output);
  }

  // optional double rtime = 8;
  if (has_rtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->rtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Spectrum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 peak_m_z = 1 [packed = true];
  if (this->peak_m_z_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _peak_m_z_cached_byte_size_, target);
  }
  for (int i = 0; i < this->peak_m_z_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->peak_m_z(i), target);
  }

  // repeated int64 peak_intensity = 2 [packed = true];
  if (this->peak_intensity_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _peak_intensity_cached_byte_size_, target);
  }
  for (int i = 0; i < this->peak_intensity_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->peak_intensity(i), target);
  }

  // optional int32 peak_m_z_denominator = 3;
  if (has_peak_m_z_denominator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->peak_m_z_denominator(), target);
  }

  // optional int32 peak_intensity_denominator = 4;
  if (has_peak_intensity_denominator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->peak_intensity_denominator(), target);
  }

  // optional int32 spectrum_number = 5;
  if (has_spectrum_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->spectrum_number(), target);
  }

  // optional double precursor_m_z = 6;
  if (has_precursor_m_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->precursor_m_z(), target);
  }

  // repeated int32 charge_state = 7 [packed = true];
  if (this->charge_state_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _charge_state_cached_byte_size_, target);
  }
  for (int i = 0; i < this->charge_state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->charge_state(i), target);
  }

  // optional double rtime = 8;
  if (has_rtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->rtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Spectrum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 peak_m_z_denominator = 3;
    if (has_peak_m_z_denominator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->peak_m_z_denominator());
    }

    // optional int32 peak_intensity_denominator = 4;
    if (has_peak_intensity_denominator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->peak_intensity_denominator());
    }

    // optional int32 spectrum_number = 5;
    if (has_spectrum_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spectrum_number());
    }

    // optional double precursor_m_z = 6;
    if (has_precursor_m_z()) {
      total_size += 1 + 8;
    }

    // optional double rtime = 8;
    if (has_rtime()) {
      total_size += 1 + 8;
    }

  }
  // repeated int64 peak_m_z = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->peak_m_z_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->peak_m_z(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _peak_m_z_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int64 peak_intensity = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->peak_intensity_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->peak_intensity(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _peak_intensity_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 charge_state = 7 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->charge_state_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->charge_state(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _charge_state_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Spectrum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Spectrum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Spectrum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Spectrum::MergeFrom(const Spectrum& from) {
  GOOGLE_CHECK_NE(&from, this);
  peak_m_z_.MergeFrom(from.peak_m_z_);
  peak_intensity_.MergeFrom(from.peak_intensity_);
  charge_state_.MergeFrom(from.charge_state_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_peak_m_z_denominator()) {
      set_peak_m_z_denominator(from.peak_m_z_denominator());
    }
    if (from.has_peak_intensity_denominator()) {
      set_peak_intensity_denominator(from.peak_intensity_denominator());
    }
    if (from.has_spectrum_number()) {
      set_spectrum_number(from.spectrum_number());
    }
    if (from.has_precursor_m_z()) {
      set_precursor_m_z(from.precursor_m_z());
    }
    if (from.has_rtime()) {
      set_rtime(from.rtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Spectrum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Spectrum::CopyFrom(const Spectrum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Spectrum::IsInitialized() const {

  return true;
}

void Spectrum::Swap(Spectrum* other) {
  if (other != this) {
    peak_m_z_.Swap(&other->peak_m_z_);
    peak_intensity_.Swap(&other->peak_intensity_);
    std::swap(peak_m_z_denominator_, other->peak_m_z_denominator_);
    std::swap(peak_intensity_denominator_, other->peak_intensity_denominator_);
    std::swap(spectrum_number_, other->spectrum_number_);
    std::swap(precursor_m_z_, other->precursor_m_z_);
    std::swap(rtime_, other->rtime_);
    charge_state_.Swap(&other->charge_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Spectrum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Spectrum_descriptor_;
  metadata.reflection = Spectrum_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
