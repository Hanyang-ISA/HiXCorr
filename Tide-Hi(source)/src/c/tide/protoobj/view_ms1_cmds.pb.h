// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: view_ms1_cmds.proto

#ifndef PROTOBUF_view_5fms1_5fcmds_2eproto__INCLUDED
#define PROTOBUF_view_5fms1_5fcmds_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_view_5fms1_5fcmds_2eproto();
void protobuf_AssignDesc_view_5fms1_5fcmds_2eproto();
void protobuf_ShutdownFile_view_5fms1_5fcmds_2eproto();

class ViewMS1Command;

// ===================================================================

class ViewMS1Command : public ::google::protobuf::Message {
 public:
  ViewMS1Command();
  virtual ~ViewMS1Command();

  ViewMS1Command(const ViewMS1Command& from);

  inline ViewMS1Command& operator=(const ViewMS1Command& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ViewMS1Command& default_instance();

  void Swap(ViewMS1Command* other);

  // implements Message ----------------------------------------------

  ViewMS1Command* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ViewMS1Command& from);
  void MergeFrom(const ViewMS1Command& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string load = 1;
  inline bool has_load() const;
  inline void clear_load();
  static const int kLoadFieldNumber = 1;
  inline const ::std::string& load() const;
  inline void set_load(const ::std::string& value);
  inline void set_load(const char* value);
  inline void set_load(const char* value, size_t size);
  inline ::std::string* mutable_load();
  inline ::std::string* release_load();
  inline void set_allocated_load(::std::string* load);

  // optional double bucket = 2;
  inline bool has_bucket() const;
  inline void clear_bucket();
  static const int kBucketFieldNumber = 2;
  inline double bucket() const;
  inline void set_bucket(double value);

  // optional double min_mz = 3;
  inline bool has_min_mz() const;
  inline void clear_min_mz();
  static const int kMinMzFieldNumber = 3;
  inline double min_mz() const;
  inline void set_min_mz(double value);

  // optional double max_mz = 4;
  inline bool has_max_mz() const;
  inline void clear_max_mz();
  static const int kMaxMzFieldNumber = 4;
  inline double max_mz() const;
  inline void set_max_mz(double value);

  // optional double min_rtime = 5;
  inline bool has_min_rtime() const;
  inline void clear_min_rtime();
  static const int kMinRtimeFieldNumber = 5;
  inline double min_rtime() const;
  inline void set_min_rtime(double value);

  // optional double max_rtime = 6;
  inline bool has_max_rtime() const;
  inline void clear_max_rtime();
  static const int kMaxRtimeFieldNumber = 6;
  inline double max_rtime() const;
  inline void set_max_rtime(double value);

  // optional string write_matrix = 7;
  inline bool has_write_matrix() const;
  inline void clear_write_matrix();
  static const int kWriteMatrixFieldNumber = 7;
  inline const ::std::string& write_matrix() const;
  inline void set_write_matrix(const ::std::string& value);
  inline void set_write_matrix(const char* value);
  inline void set_write_matrix(const char* value, size_t size);
  inline ::std::string* mutable_write_matrix();
  inline ::std::string* release_write_matrix();
  inline void set_allocated_write_matrix(::std::string* write_matrix);

  // @@protoc_insertion_point(class_scope:pb.ViewMS1Command)
 private:
  inline void set_has_load();
  inline void clear_has_load();
  inline void set_has_bucket();
  inline void clear_has_bucket();
  inline void set_has_min_mz();
  inline void clear_has_min_mz();
  inline void set_has_max_mz();
  inline void clear_has_max_mz();
  inline void set_has_min_rtime();
  inline void clear_has_min_rtime();
  inline void set_has_max_rtime();
  inline void clear_has_max_rtime();
  inline void set_has_write_matrix();
  inline void clear_has_write_matrix();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* load_;
  double bucket_;
  double min_mz_;
  double max_mz_;
  double min_rtime_;
  double max_rtime_;
  ::std::string* write_matrix_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_view_5fms1_5fcmds_2eproto();
  friend void protobuf_AssignDesc_view_5fms1_5fcmds_2eproto();
  friend void protobuf_ShutdownFile_view_5fms1_5fcmds_2eproto();

  void InitAsDefaultInstance();
  static ViewMS1Command* default_instance_;
};
// ===================================================================


// ===================================================================

// ViewMS1Command

// optional string load = 1;
inline bool ViewMS1Command::has_load() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ViewMS1Command::set_has_load() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ViewMS1Command::clear_has_load() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ViewMS1Command::clear_load() {
  if (load_ != &::google::protobuf::internal::kEmptyString) {
    load_->clear();
  }
  clear_has_load();
}
inline const ::std::string& ViewMS1Command::load() const {
  return *load_;
}
inline void ViewMS1Command::set_load(const ::std::string& value) {
  set_has_load();
  if (load_ == &::google::protobuf::internal::kEmptyString) {
    load_ = new ::std::string;
  }
  load_->assign(value);
}
inline void ViewMS1Command::set_load(const char* value) {
  set_has_load();
  if (load_ == &::google::protobuf::internal::kEmptyString) {
    load_ = new ::std::string;
  }
  load_->assign(value);
}
inline void ViewMS1Command::set_load(const char* value, size_t size) {
  set_has_load();
  if (load_ == &::google::protobuf::internal::kEmptyString) {
    load_ = new ::std::string;
  }
  load_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ViewMS1Command::mutable_load() {
  set_has_load();
  if (load_ == &::google::protobuf::internal::kEmptyString) {
    load_ = new ::std::string;
  }
  return load_;
}
inline ::std::string* ViewMS1Command::release_load() {
  clear_has_load();
  if (load_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = load_;
    load_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ViewMS1Command::set_allocated_load(::std::string* load) {
  if (load_ != &::google::protobuf::internal::kEmptyString) {
    delete load_;
  }
  if (load) {
    set_has_load();
    load_ = load;
  } else {
    clear_has_load();
    load_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional double bucket = 2;
inline bool ViewMS1Command::has_bucket() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ViewMS1Command::set_has_bucket() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ViewMS1Command::clear_has_bucket() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ViewMS1Command::clear_bucket() {
  bucket_ = 0;
  clear_has_bucket();
}
inline double ViewMS1Command::bucket() const {
  return bucket_;
}
inline void ViewMS1Command::set_bucket(double value) {
  set_has_bucket();
  bucket_ = value;
}

// optional double min_mz = 3;
inline bool ViewMS1Command::has_min_mz() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ViewMS1Command::set_has_min_mz() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ViewMS1Command::clear_has_min_mz() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ViewMS1Command::clear_min_mz() {
  min_mz_ = 0;
  clear_has_min_mz();
}
inline double ViewMS1Command::min_mz() const {
  return min_mz_;
}
inline void ViewMS1Command::set_min_mz(double value) {
  set_has_min_mz();
  min_mz_ = value;
}

// optional double max_mz = 4;
inline bool ViewMS1Command::has_max_mz() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ViewMS1Command::set_has_max_mz() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ViewMS1Command::clear_has_max_mz() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ViewMS1Command::clear_max_mz() {
  max_mz_ = 0;
  clear_has_max_mz();
}
inline double ViewMS1Command::max_mz() const {
  return max_mz_;
}
inline void ViewMS1Command::set_max_mz(double value) {
  set_has_max_mz();
  max_mz_ = value;
}

// optional double min_rtime = 5;
inline bool ViewMS1Command::has_min_rtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ViewMS1Command::set_has_min_rtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ViewMS1Command::clear_has_min_rtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ViewMS1Command::clear_min_rtime() {
  min_rtime_ = 0;
  clear_has_min_rtime();
}
inline double ViewMS1Command::min_rtime() const {
  return min_rtime_;
}
inline void ViewMS1Command::set_min_rtime(double value) {
  set_has_min_rtime();
  min_rtime_ = value;
}

// optional double max_rtime = 6;
inline bool ViewMS1Command::has_max_rtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ViewMS1Command::set_has_max_rtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ViewMS1Command::clear_has_max_rtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ViewMS1Command::clear_max_rtime() {
  max_rtime_ = 0;
  clear_has_max_rtime();
}
inline double ViewMS1Command::max_rtime() const {
  return max_rtime_;
}
inline void ViewMS1Command::set_max_rtime(double value) {
  set_has_max_rtime();
  max_rtime_ = value;
}

// optional string write_matrix = 7;
inline bool ViewMS1Command::has_write_matrix() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ViewMS1Command::set_has_write_matrix() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ViewMS1Command::clear_has_write_matrix() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ViewMS1Command::clear_write_matrix() {
  if (write_matrix_ != &::google::protobuf::internal::kEmptyString) {
    write_matrix_->clear();
  }
  clear_has_write_matrix();
}
inline const ::std::string& ViewMS1Command::write_matrix() const {
  return *write_matrix_;
}
inline void ViewMS1Command::set_write_matrix(const ::std::string& value) {
  set_has_write_matrix();
  if (write_matrix_ == &::google::protobuf::internal::kEmptyString) {
    write_matrix_ = new ::std::string;
  }
  write_matrix_->assign(value);
}
inline void ViewMS1Command::set_write_matrix(const char* value) {
  set_has_write_matrix();
  if (write_matrix_ == &::google::protobuf::internal::kEmptyString) {
    write_matrix_ = new ::std::string;
  }
  write_matrix_->assign(value);
}
inline void ViewMS1Command::set_write_matrix(const char* value, size_t size) {
  set_has_write_matrix();
  if (write_matrix_ == &::google::protobuf::internal::kEmptyString) {
    write_matrix_ = new ::std::string;
  }
  write_matrix_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ViewMS1Command::mutable_write_matrix() {
  set_has_write_matrix();
  if (write_matrix_ == &::google::protobuf::internal::kEmptyString) {
    write_matrix_ = new ::std::string;
  }
  return write_matrix_;
}
inline ::std::string* ViewMS1Command::release_write_matrix() {
  clear_has_write_matrix();
  if (write_matrix_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = write_matrix_;
    write_matrix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ViewMS1Command::set_allocated_write_matrix(::std::string* write_matrix) {
  if (write_matrix_ != &::google::protobuf::internal::kEmptyString) {
    delete write_matrix_;
  }
  if (write_matrix) {
    set_has_write_matrix();
    write_matrix_ = write_matrix;
  } else {
    clear_has_write_matrix();
    write_matrix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_view_5fms1_5fcmds_2eproto__INCLUDED
