// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: peptides.proto

#ifndef PROTOBUF_peptides_2eproto__INCLUDED
#define PROTOBUF_peptides_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "raw_proteins.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_peptides_2eproto();
void protobuf_AssignDesc_peptides_2eproto();
void protobuf_ShutdownFile_peptides_2eproto();

class Location;
class Peptide;
class AuxLocation;

enum Peptide_Series {
  Peptide_Series_Y = 0,
  Peptide_Series_B = 1
};
bool Peptide_Series_IsValid(int value);
const Peptide_Series Peptide_Series_Series_MIN = Peptide_Series_Y;
const Peptide_Series Peptide_Series_Series_MAX = Peptide_Series_B;
const int Peptide_Series_Series_ARRAYSIZE = Peptide_Series_Series_MAX + 1;

const ::google::protobuf::EnumDescriptor* Peptide_Series_descriptor();
inline const ::std::string& Peptide_Series_Name(Peptide_Series value) {
  return ::google::protobuf::internal::NameOfEnum(
    Peptide_Series_descriptor(), value);
}
inline bool Peptide_Series_Parse(
    const ::std::string& name, Peptide_Series* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Peptide_Series>(
    Peptide_Series_descriptor(), name, value);
}
// ===================================================================

class Location : public ::google::protobuf::Message {
 public:
  Location();
  virtual ~Location();

  Location(const Location& from);

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Location& default_instance();

  void Swap(Location* other);

  // implements Message ----------------------------------------------

  Location* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 protein_id = 1;
  inline bool has_protein_id() const;
  inline void clear_protein_id();
  static const int kProteinIdFieldNumber = 1;
  inline ::google::protobuf::int32 protein_id() const;
  inline void set_protein_id(::google::protobuf::int32 value);

  // optional int32 pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.Location)
 private:
  inline void set_has_protein_id();
  inline void clear_has_protein_id();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 protein_id_;
  ::google::protobuf::int32 pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_peptides_2eproto();
  friend void protobuf_AssignDesc_peptides_2eproto();
  friend void protobuf_ShutdownFile_peptides_2eproto();

  void InitAsDefaultInstance();
  static Location* default_instance_;
};
// -------------------------------------------------------------------

class Peptide : public ::google::protobuf::Message {
 public:
  Peptide();
  virtual ~Peptide();

  Peptide(const Peptide& from);

  inline Peptide& operator=(const Peptide& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Peptide& default_instance();

  void Swap(Peptide* other);

  // implements Message ----------------------------------------------

  Peptide* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Peptide& from);
  void MergeFrom(const Peptide& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Peptide_Series Series;
  static const Series Y = Peptide_Series_Y;
  static const Series B = Peptide_Series_B;
  static inline bool Series_IsValid(int value) {
    return Peptide_Series_IsValid(value);
  }
  static const Series Series_MIN =
    Peptide_Series_Series_MIN;
  static const Series Series_MAX =
    Peptide_Series_Series_MAX;
  static const int Series_ARRAYSIZE =
    Peptide_Series_Series_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Series_descriptor() {
    return Peptide_Series_descriptor();
  }
  static inline const ::std::string& Series_Name(Series value) {
    return Peptide_Series_Name(value);
  }
  static inline bool Series_Parse(const ::std::string& name,
      Series* value) {
    return Peptide_Series_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional double mass = 2;
  inline bool has_mass() const;
  inline void clear_mass();
  static const int kMassFieldNumber = 2;
  inline double mass() const;
  inline void set_mass(double value);

  // optional int32 length = 3;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 3;
  inline ::google::protobuf::int32 length() const;
  inline void set_length(::google::protobuf::int32 value);

  // optional .pb.Location first_location = 4;
  inline bool has_first_location() const;
  inline void clear_first_location();
  static const int kFirstLocationFieldNumber = 4;
  inline const ::pb::Location& first_location() const;
  inline ::pb::Location* mutable_first_location();
  inline ::pb::Location* release_first_location();
  inline void set_allocated_first_location(::pb::Location* first_location);

  // repeated int32 peak1 = 5 [packed = true];
  inline int peak1_size() const;
  inline void clear_peak1();
  static const int kPeak1FieldNumber = 5;
  inline ::google::protobuf::int32 peak1(int index) const;
  inline void set_peak1(int index, ::google::protobuf::int32 value);
  inline void add_peak1(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      peak1() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_peak1();

  // repeated int32 peak2 = 6 [packed = true];
  inline int peak2_size() const;
  inline void clear_peak2();
  static const int kPeak2FieldNumber = 6;
  inline ::google::protobuf::int32 peak2(int index) const;
  inline void set_peak2(int index, ::google::protobuf::int32 value);
  inline void add_peak2(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      peak2() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_peak2();

  // repeated int32 neg_peak1 = 7 [packed = true];
  inline int neg_peak1_size() const;
  inline void clear_neg_peak1();
  static const int kNegPeak1FieldNumber = 7;
  inline ::google::protobuf::int32 neg_peak1(int index) const;
  inline void set_neg_peak1(int index, ::google::protobuf::int32 value);
  inline void add_neg_peak1(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      neg_peak1() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_neg_peak1();

  // repeated int32 neg_peak2 = 8 [packed = true];
  inline int neg_peak2_size() const;
  inline void clear_neg_peak2();
  static const int kNegPeak2FieldNumber = 8;
  inline ::google::protobuf::int32 neg_peak2(int index) const;
  inline void set_neg_peak2(int index, ::google::protobuf::int32 value);
  inline void add_neg_peak2(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      neg_peak2() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_neg_peak2();

  // repeated int32 modifications = 9 [packed = true];
  inline int modifications_size() const;
  inline void clear_modifications();
  static const int kModificationsFieldNumber = 9;
  inline ::google::protobuf::int32 modifications(int index) const;
  inline void set_modifications(int index, ::google::protobuf::int32 value);
  inline void add_modifications(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      modifications() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_modifications();

  // optional int32 aux_locations_index = 10;
  inline bool has_aux_locations_index() const;
  inline void clear_aux_locations_index();
  static const int kAuxLocationsIndexFieldNumber = 10;
  inline ::google::protobuf::int32 aux_locations_index() const;
  inline void set_aux_locations_index(::google::protobuf::int32 value);

  // optional bool is_decoy = 11;
  inline bool has_is_decoy() const;
  inline void clear_is_decoy();
  static const int kIsDecoyFieldNumber = 11;
  inline bool is_decoy() const;
  inline void set_is_decoy(bool value);

  // @@protoc_insertion_point(class_scope:pb.Peptide)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_mass();
  inline void clear_has_mass();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_first_location();
  inline void clear_has_first_location();
  inline void set_has_aux_locations_index();
  inline void clear_has_aux_locations_index();
  inline void set_has_is_decoy();
  inline void clear_has_is_decoy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double mass_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 length_;
  ::pb::Location* first_location_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > peak1_;
  mutable int _peak1_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > peak2_;
  mutable int _peak2_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > neg_peak1_;
  mutable int _neg_peak1_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > neg_peak2_;
  mutable int _neg_peak2_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > modifications_;
  mutable int _modifications_cached_byte_size_;
  ::google::protobuf::int32 aux_locations_index_;
  bool is_decoy_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_peptides_2eproto();
  friend void protobuf_AssignDesc_peptides_2eproto();
  friend void protobuf_ShutdownFile_peptides_2eproto();

  void InitAsDefaultInstance();
  static Peptide* default_instance_;
};
// -------------------------------------------------------------------

class AuxLocation : public ::google::protobuf::Message {
 public:
  AuxLocation();
  virtual ~AuxLocation();

  AuxLocation(const AuxLocation& from);

  inline AuxLocation& operator=(const AuxLocation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuxLocation& default_instance();

  void Swap(AuxLocation* other);

  // implements Message ----------------------------------------------

  AuxLocation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuxLocation& from);
  void MergeFrom(const AuxLocation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.Location location = 1;
  inline int location_size() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 1;
  inline const ::pb::Location& location(int index) const;
  inline ::pb::Location* mutable_location(int index);
  inline ::pb::Location* add_location();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::Location >&
      location() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::Location >*
      mutable_location();

  // @@protoc_insertion_point(class_scope:pb.AuxLocation)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::pb::Location > location_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_peptides_2eproto();
  friend void protobuf_AssignDesc_peptides_2eproto();
  friend void protobuf_ShutdownFile_peptides_2eproto();

  void InitAsDefaultInstance();
  static AuxLocation* default_instance_;
};
// ===================================================================


// ===================================================================

// Location

// optional int32 protein_id = 1;
inline bool Location::has_protein_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Location::set_has_protein_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Location::clear_has_protein_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Location::clear_protein_id() {
  protein_id_ = 0;
  clear_has_protein_id();
}
inline ::google::protobuf::int32 Location::protein_id() const {
  return protein_id_;
}
inline void Location::set_protein_id(::google::protobuf::int32 value) {
  set_has_protein_id();
  protein_id_ = value;
}

// optional int32 pos = 2;
inline bool Location::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Location::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Location::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Location::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 Location::pos() const {
  return pos_;
}
inline void Location::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// -------------------------------------------------------------------

// Peptide

// optional int32 id = 1;
inline bool Peptide::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Peptide::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Peptide::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Peptide::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Peptide::id() const {
  return id_;
}
inline void Peptide::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional double mass = 2;
inline bool Peptide::has_mass() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Peptide::set_has_mass() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Peptide::clear_has_mass() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Peptide::clear_mass() {
  mass_ = 0;
  clear_has_mass();
}
inline double Peptide::mass() const {
  return mass_;
}
inline void Peptide::set_mass(double value) {
  set_has_mass();
  mass_ = value;
}

// optional int32 length = 3;
inline bool Peptide::has_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Peptide::set_has_length() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Peptide::clear_has_length() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Peptide::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline ::google::protobuf::int32 Peptide::length() const {
  return length_;
}
inline void Peptide::set_length(::google::protobuf::int32 value) {
  set_has_length();
  length_ = value;
}

// optional .pb.Location first_location = 4;
inline bool Peptide::has_first_location() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Peptide::set_has_first_location() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Peptide::clear_has_first_location() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Peptide::clear_first_location() {
  if (first_location_ != NULL) first_location_->::pb::Location::Clear();
  clear_has_first_location();
}
inline const ::pb::Location& Peptide::first_location() const {
  return first_location_ != NULL ? *first_location_ : *default_instance_->first_location_;
}
inline ::pb::Location* Peptide::mutable_first_location() {
  set_has_first_location();
  if (first_location_ == NULL) first_location_ = new ::pb::Location;
  return first_location_;
}
inline ::pb::Location* Peptide::release_first_location() {
  clear_has_first_location();
  ::pb::Location* temp = first_location_;
  first_location_ = NULL;
  return temp;
}
inline void Peptide::set_allocated_first_location(::pb::Location* first_location) {
  delete first_location_;
  first_location_ = first_location;
  if (first_location) {
    set_has_first_location();
  } else {
    clear_has_first_location();
  }
}

// repeated int32 peak1 = 5 [packed = true];
inline int Peptide::peak1_size() const {
  return peak1_.size();
}
inline void Peptide::clear_peak1() {
  peak1_.Clear();
}
inline ::google::protobuf::int32 Peptide::peak1(int index) const {
  return peak1_.Get(index);
}
inline void Peptide::set_peak1(int index, ::google::protobuf::int32 value) {
  peak1_.Set(index, value);
}
inline void Peptide::add_peak1(::google::protobuf::int32 value) {
  peak1_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Peptide::peak1() const {
  return peak1_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Peptide::mutable_peak1() {
  return &peak1_;
}

// repeated int32 peak2 = 6 [packed = true];
inline int Peptide::peak2_size() const {
  return peak2_.size();
}
inline void Peptide::clear_peak2() {
  peak2_.Clear();
}
inline ::google::protobuf::int32 Peptide::peak2(int index) const {
  return peak2_.Get(index);
}
inline void Peptide::set_peak2(int index, ::google::protobuf::int32 value) {
  peak2_.Set(index, value);
}
inline void Peptide::add_peak2(::google::protobuf::int32 value) {
  peak2_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Peptide::peak2() const {
  return peak2_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Peptide::mutable_peak2() {
  return &peak2_;
}

// repeated int32 neg_peak1 = 7 [packed = true];
inline int Peptide::neg_peak1_size() const {
  return neg_peak1_.size();
}
inline void Peptide::clear_neg_peak1() {
  neg_peak1_.Clear();
}
inline ::google::protobuf::int32 Peptide::neg_peak1(int index) const {
  return neg_peak1_.Get(index);
}
inline void Peptide::set_neg_peak1(int index, ::google::protobuf::int32 value) {
  neg_peak1_.Set(index, value);
}
inline void Peptide::add_neg_peak1(::google::protobuf::int32 value) {
  neg_peak1_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Peptide::neg_peak1() const {
  return neg_peak1_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Peptide::mutable_neg_peak1() {
  return &neg_peak1_;
}

// repeated int32 neg_peak2 = 8 [packed = true];
inline int Peptide::neg_peak2_size() const {
  return neg_peak2_.size();
}
inline void Peptide::clear_neg_peak2() {
  neg_peak2_.Clear();
}
inline ::google::protobuf::int32 Peptide::neg_peak2(int index) const {
  return neg_peak2_.Get(index);
}
inline void Peptide::set_neg_peak2(int index, ::google::protobuf::int32 value) {
  neg_peak2_.Set(index, value);
}
inline void Peptide::add_neg_peak2(::google::protobuf::int32 value) {
  neg_peak2_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Peptide::neg_peak2() const {
  return neg_peak2_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Peptide::mutable_neg_peak2() {
  return &neg_peak2_;
}

// repeated int32 modifications = 9 [packed = true];
inline int Peptide::modifications_size() const {
  return modifications_.size();
}
inline void Peptide::clear_modifications() {
  modifications_.Clear();
}
inline ::google::protobuf::int32 Peptide::modifications(int index) const {
  return modifications_.Get(index);
}
inline void Peptide::set_modifications(int index, ::google::protobuf::int32 value) {
  modifications_.Set(index, value);
}
inline void Peptide::add_modifications(::google::protobuf::int32 value) {
  modifications_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Peptide::modifications() const {
  return modifications_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Peptide::mutable_modifications() {
  return &modifications_;
}

// optional int32 aux_locations_index = 10;
inline bool Peptide::has_aux_locations_index() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Peptide::set_has_aux_locations_index() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Peptide::clear_has_aux_locations_index() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Peptide::clear_aux_locations_index() {
  aux_locations_index_ = 0;
  clear_has_aux_locations_index();
}
inline ::google::protobuf::int32 Peptide::aux_locations_index() const {
  return aux_locations_index_;
}
inline void Peptide::set_aux_locations_index(::google::protobuf::int32 value) {
  set_has_aux_locations_index();
  aux_locations_index_ = value;
}

// optional bool is_decoy = 11;
inline bool Peptide::has_is_decoy() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Peptide::set_has_is_decoy() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Peptide::clear_has_is_decoy() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Peptide::clear_is_decoy() {
  is_decoy_ = false;
  clear_has_is_decoy();
}
inline bool Peptide::is_decoy() const {
  return is_decoy_;
}
inline void Peptide::set_is_decoy(bool value) {
  set_has_is_decoy();
  is_decoy_ = value;
}

// -------------------------------------------------------------------

// AuxLocation

// repeated .pb.Location location = 1;
inline int AuxLocation::location_size() const {
  return location_.size();
}
inline void AuxLocation::clear_location() {
  location_.Clear();
}
inline const ::pb::Location& AuxLocation::location(int index) const {
  return location_.Get(index);
}
inline ::pb::Location* AuxLocation::mutable_location(int index) {
  return location_.Mutable(index);
}
inline ::pb::Location* AuxLocation::add_location() {
  return location_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Location >&
AuxLocation::location() const {
  return location_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Location >*
AuxLocation::mutable_location() {
  return &location_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::Peptide_Series>() {
  return ::pb::Peptide_Series_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_peptides_2eproto__INCLUDED
