// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: header.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "header.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* Modification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Modification_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* Header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_reflection_ = NULL;
const ::google::protobuf::Descriptor* Header_Source_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_Source_reflection_ = NULL;
const ::google::protobuf::Descriptor* Header_RawProteinsHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_RawProteinsHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* Header_PeptidesHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_PeptidesHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* Header_SpectraHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_SpectraHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* Header_ResultsHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_ResultsHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* Header_AuxLocationsHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_AuxLocationsHeader_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Header_FileType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_header_2eproto() {
  protobuf_AddDesc_header_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "header.proto");
  GOOGLE_CHECK(file != NULL);
  Modification_descriptor_ = file->message_type(0);
  static const int Modification_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Modification, amino_acids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Modification, delta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Modification, max_count_),
  };
  Modification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Modification_descriptor_,
      Modification::default_instance_,
      Modification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Modification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Modification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Modification));
  ModTable_descriptor_ = file->message_type(1);
  static const int ModTable_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModTable, variable_mod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModTable, static_mod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModTable, unique_deltas_),
  };
  ModTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModTable_descriptor_,
      ModTable::default_instance_,
      ModTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModTable));
  Header_descriptor_ = file->message_type(2);
  static const int Header_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, file_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, raw_proteins_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, peptides_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, spectra_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, results_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, aux_locs_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, command_line_),
  };
  Header_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Header_descriptor_,
      Header::default_instance_,
      Header_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Header));
  Header_Source_descriptor_ = Header_descriptor_->nested_type(0);
  static const int Header_Source_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_Source, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_Source, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_Source, filetype_),
  };
  Header_Source_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Header_Source_descriptor_,
      Header_Source::default_instance_,
      Header_Source_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_Source, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_Source, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Header_Source));
  Header_RawProteinsHeader_descriptor_ = Header_descriptor_->nested_type(1);
  static const int Header_RawProteinsHeader_offsets_[1] = {
  };
  Header_RawProteinsHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Header_RawProteinsHeader_descriptor_,
      Header_RawProteinsHeader::default_instance_,
      Header_RawProteinsHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_RawProteinsHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_RawProteinsHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Header_RawProteinsHeader));
  Header_PeptidesHeader_descriptor_ = Header_descriptor_->nested_type(2);
  static const int Header_PeptidesHeader_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_PeptidesHeader, min_mass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_PeptidesHeader, max_mass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_PeptidesHeader, min_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_PeptidesHeader, max_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_PeptidesHeader, enzyme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_PeptidesHeader, full_digestion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_PeptidesHeader, max_missed_cleavages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_PeptidesHeader, monoisotopic_precursor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_PeptidesHeader, has_peaks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_PeptidesHeader, downselect_fraction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_PeptidesHeader, mods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_PeptidesHeader, decoys_),
  };
  Header_PeptidesHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Header_PeptidesHeader_descriptor_,
      Header_PeptidesHeader::default_instance_,
      Header_PeptidesHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_PeptidesHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_PeptidesHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Header_PeptidesHeader));
  Header_SpectraHeader_descriptor_ = Header_descriptor_->nested_type(3);
  static const int Header_SpectraHeader_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_SpectraHeader, sorted_),
  };
  Header_SpectraHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Header_SpectraHeader_descriptor_,
      Header_SpectraHeader::default_instance_,
      Header_SpectraHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_SpectraHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_SpectraHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Header_SpectraHeader));
  Header_ResultsHeader_descriptor_ = Header_descriptor_->nested_type(4);
  static const int Header_ResultsHeader_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_ResultsHeader, mass_window_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_ResultsHeader, top_matches_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_ResultsHeader, peptides_header_),
  };
  Header_ResultsHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Header_ResultsHeader_descriptor_,
      Header_ResultsHeader::default_instance_,
      Header_ResultsHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_ResultsHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_ResultsHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Header_ResultsHeader));
  Header_AuxLocationsHeader_descriptor_ = Header_descriptor_->nested_type(5);
  static const int Header_AuxLocationsHeader_offsets_[1] = {
  };
  Header_AuxLocationsHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Header_AuxLocationsHeader_descriptor_,
      Header_AuxLocationsHeader::default_instance_,
      Header_AuxLocationsHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_AuxLocationsHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_AuxLocationsHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Header_AuxLocationsHeader));
  Header_FileType_descriptor_ = Header_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_header_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Modification_descriptor_, &Modification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModTable_descriptor_, &ModTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Header_descriptor_, &Header::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Header_Source_descriptor_, &Header_Source::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Header_RawProteinsHeader_descriptor_, &Header_RawProteinsHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Header_PeptidesHeader_descriptor_, &Header_PeptidesHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Header_SpectraHeader_descriptor_, &Header_SpectraHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Header_ResultsHeader_descriptor_, &Header_ResultsHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Header_AuxLocationsHeader_descriptor_, &Header_AuxLocationsHeader::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_header_2eproto() {
  delete Modification::default_instance_;
  delete Modification_reflection_;
  delete ModTable::default_instance_;
  delete ModTable_reflection_;
  delete Header::default_instance_;
  delete Header_reflection_;
  delete Header_Source::default_instance_;
  delete Header_Source_reflection_;
  delete Header_RawProteinsHeader::default_instance_;
  delete Header_RawProteinsHeader_reflection_;
  delete Header_PeptidesHeader::default_instance_;
  delete Header_PeptidesHeader_reflection_;
  delete Header_SpectraHeader::default_instance_;
  delete Header_SpectraHeader_reflection_;
  delete Header_ResultsHeader::default_instance_;
  delete Header_ResultsHeader_reflection_;
  delete Header_AuxLocationsHeader::default_instance_;
  delete Header_AuxLocationsHeader_reflection_;
}

void protobuf_AddDesc_header_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014header.proto\022\002pb\"E\n\014Modification\022\023\n\013am"
    "ino_acids\030\001 \001(\t\022\r\n\005delta\030\002 \001(\001\022\021\n\tmax_co"
    "unt\030\003 \001(\005\"o\n\010ModTable\022&\n\014variable_mod\030\001 "
    "\003(\0132\020.pb.Modification\022$\n\nstatic_mod\030\002 \003("
    "\0132\020.pb.Modification\022\025\n\runique_deltas\030\n \003"
    "(\001\"\216\010\n\006Header\022!\n\006source\030\001 \003(\0132\021.pb.Heade"
    "r.Source\022&\n\tfile_type\030\002 \002(\0162\023.pb.Header."
    "FileType\0229\n\023raw_proteins_header\030\003 \001(\0132\034."
    "pb.Header.RawProteinsHeader\0222\n\017peptides_"
    "header\030\004 \001(\0132\031.pb.Header.PeptidesHeader\022"
    "0\n\016spectra_header\030\005 \001(\0132\030.pb.Header.Spec"
    "traHeader\0220\n\016results_header\030\006 \001(\0132\030.pb.H"
    "eader.ResultsHeader\0226\n\017aux_locs_header\030\007"
    " \001(\0132\035.pb.Header.AuxLocationsHeader\022\024\n\014c"
    "ommand_line\030\010 \001(\t\032H\n\006Source\022\020\n\010filename\030"
    "\001 \001(\t\022\032\n\006header\030\002 \001(\0132\n.pb.Header\022\020\n\010fil"
    "etype\030\003 \001(\t\032\023\n\021RawProteinsHeader\032\236\002\n\016Pep"
    "tidesHeader\022\020\n\010min_mass\030\003 \001(\001\022\020\n\010max_mas"
    "s\030\004 \001(\001\022\022\n\nmin_length\030\005 \001(\005\022\022\n\nmax_lengt"
    "h\030\006 \001(\005\022\016\n\006enzyme\030\007 \001(\t\022\026\n\016full_digestio"
    "n\030\010 \001(\010\022\034\n\024max_missed_cleavages\030\016 \001(\005\022\036\n"
    "\026monoisotopic_precursor\030\r \001(\010\022\021\n\thas_pea"
    "ks\030\n \001(\010\022\033\n\023downselect_fraction\030\013 \001(\001\022\032\n"
    "\004mods\030\014 \001(\0132\014.pb.ModTable\022\016\n\006decoys\030\t \001("
    "\005\032\037\n\rSpectraHeader\022\016\n\006sorted\030\002 \001(\010\032m\n\rRe"
    "sultsHeader\022\023\n\013mass_window\030\001 \001(\001\022\023\n\013top_"
    "matches\030\002 \001(\005\0222\n\017peptides_header\030\003 \001(\0132\031"
    ".pb.Header.PeptidesHeader\032\024\n\022AuxLocation"
    "sHeader\"r\n\010FileType\022\020\n\014RAW_PROTEINS\020\000\022\014\n"
    "\010PEPTIDES\020\001\022\013\n\007SPECTRA\020\002\022\n\n\006PARAMS\020\003\022\r\n\t"
    "MOD_TABLE\020\004\022\013\n\007RESULTS\020\005\022\021\n\rAUX_LOCATION"
    "S\020\006", 1243);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "header.proto", &protobuf_RegisterTypes);
  Modification::default_instance_ = new Modification();
  ModTable::default_instance_ = new ModTable();
  Header::default_instance_ = new Header();
  Header_Source::default_instance_ = new Header_Source();
  Header_RawProteinsHeader::default_instance_ = new Header_RawProteinsHeader();
  Header_PeptidesHeader::default_instance_ = new Header_PeptidesHeader();
  Header_SpectraHeader::default_instance_ = new Header_SpectraHeader();
  Header_ResultsHeader::default_instance_ = new Header_ResultsHeader();
  Header_AuxLocationsHeader::default_instance_ = new Header_AuxLocationsHeader();
  Modification::default_instance_->InitAsDefaultInstance();
  ModTable::default_instance_->InitAsDefaultInstance();
  Header::default_instance_->InitAsDefaultInstance();
  Header_Source::default_instance_->InitAsDefaultInstance();
  Header_RawProteinsHeader::default_instance_->InitAsDefaultInstance();
  Header_PeptidesHeader::default_instance_->InitAsDefaultInstance();
  Header_SpectraHeader::default_instance_->InitAsDefaultInstance();
  Header_ResultsHeader::default_instance_->InitAsDefaultInstance();
  Header_AuxLocationsHeader::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_header_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_header_2eproto {
  StaticDescriptorInitializer_header_2eproto() {
    protobuf_AddDesc_header_2eproto();
  }
} static_descriptor_initializer_header_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Modification::kAminoAcidsFieldNumber;
const int Modification::kDeltaFieldNumber;
const int Modification::kMaxCountFieldNumber;
#endif  // !_MSC_VER

Modification::Modification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Modification::InitAsDefaultInstance() {
}

Modification::Modification(const Modification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Modification::SharedCtor() {
  _cached_size_ = 0;
  amino_acids_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  delta_ = 0;
  max_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Modification::~Modification() {
  SharedDtor();
}

void Modification::SharedDtor() {
  if (amino_acids_ != &::google::protobuf::internal::kEmptyString) {
    delete amino_acids_;
  }
  if (this != default_instance_) {
  }
}

void Modification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Modification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Modification_descriptor_;
}

const Modification& Modification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_header_2eproto();
  return *default_instance_;
}

Modification* Modification::default_instance_ = NULL;

Modification* Modification::New() const {
  return new Modification;
}

void Modification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_amino_acids()) {
      if (amino_acids_ != &::google::protobuf::internal::kEmptyString) {
        amino_acids_->clear();
      }
    }
    delta_ = 0;
    max_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Modification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string amino_acids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_amino_acids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->amino_acids().data(), this->amino_acids().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_delta;
        break;
      }

      // optional double delta = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_delta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delta_)));
          set_has_delta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_count;
        break;
      }

      // optional int32 max_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_count_)));
          set_has_max_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Modification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string amino_acids = 1;
  if (has_amino_acids()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->amino_acids().data(), this->amino_acids().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->amino_acids(), output);
  }

  // optional double delta = 2;
  if (has_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->delta(), output);
  }

  // optional int32 max_count = 3;
  if (has_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Modification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string amino_acids = 1;
  if (has_amino_acids()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->amino_acids().data(), this->amino_acids().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->amino_acids(), target);
  }

  // optional double delta = 2;
  if (has_delta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->delta(), target);
  }

  // optional int32 max_count = 3;
  if (has_max_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Modification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string amino_acids = 1;
    if (has_amino_acids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->amino_acids());
    }

    // optional double delta = 2;
    if (has_delta()) {
      total_size += 1 + 8;
    }

    // optional int32 max_count = 3;
    if (has_max_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Modification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Modification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Modification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Modification::MergeFrom(const Modification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_amino_acids()) {
      set_amino_acids(from.amino_acids());
    }
    if (from.has_delta()) {
      set_delta(from.delta());
    }
    if (from.has_max_count()) {
      set_max_count(from.max_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Modification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Modification::CopyFrom(const Modification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Modification::IsInitialized() const {

  return true;
}

void Modification::Swap(Modification* other) {
  if (other != this) {
    std::swap(amino_acids_, other->amino_acids_);
    std::swap(delta_, other->delta_);
    std::swap(max_count_, other->max_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Modification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Modification_descriptor_;
  metadata.reflection = Modification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModTable::kVariableModFieldNumber;
const int ModTable::kStaticModFieldNumber;
const int ModTable::kUniqueDeltasFieldNumber;
#endif  // !_MSC_VER

ModTable::ModTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModTable::InitAsDefaultInstance() {
}

ModTable::ModTable(const ModTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModTable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModTable::~ModTable() {
  SharedDtor();
}

void ModTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ModTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModTable_descriptor_;
}

const ModTable& ModTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_header_2eproto();
  return *default_instance_;
}

ModTable* ModTable::default_instance_ = NULL;

ModTable* ModTable::New() const {
  return new ModTable;
}

void ModTable::Clear() {
  variable_mod_.Clear();
  static_mod_.Clear();
  unique_deltas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.Modification variable_mod = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_variable_mod:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_variable_mod()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_variable_mod;
        if (input->ExpectTag(18)) goto parse_static_mod;
        break;
      }

      // repeated .pb.Modification static_mod = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_static_mod:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_static_mod()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_static_mod;
        if (input->ExpectTag(81)) goto parse_unique_deltas;
        break;
      }

      // repeated double unique_deltas = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_unique_deltas:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 81, input, this->mutable_unique_deltas())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_unique_deltas())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_unique_deltas;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.Modification variable_mod = 1;
  for (int i = 0; i < this->variable_mod_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->variable_mod(i), output);
  }

  // repeated .pb.Modification static_mod = 2;
  for (int i = 0; i < this->static_mod_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->static_mod(i), output);
  }

  // repeated double unique_deltas = 10;
  for (int i = 0; i < this->unique_deltas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      10, this->unique_deltas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.Modification variable_mod = 1;
  for (int i = 0; i < this->variable_mod_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->variable_mod(i), target);
  }

  // repeated .pb.Modification static_mod = 2;
  for (int i = 0; i < this->static_mod_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->static_mod(i), target);
  }

  // repeated double unique_deltas = 10;
  for (int i = 0; i < this->unique_deltas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(10, this->unique_deltas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModTable::ByteSize() const {
  int total_size = 0;

  // repeated .pb.Modification variable_mod = 1;
  total_size += 1 * this->variable_mod_size();
  for (int i = 0; i < this->variable_mod_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->variable_mod(i));
  }

  // repeated .pb.Modification static_mod = 2;
  total_size += 1 * this->static_mod_size();
  for (int i = 0; i < this->static_mod_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->static_mod(i));
  }

  // repeated double unique_deltas = 10;
  {
    int data_size = 0;
    data_size = 8 * this->unique_deltas_size();
    total_size += 1 * this->unique_deltas_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModTable::MergeFrom(const ModTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  variable_mod_.MergeFrom(from.variable_mod_);
  static_mod_.MergeFrom(from.static_mod_);
  unique_deltas_.MergeFrom(from.unique_deltas_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModTable::CopyFrom(const ModTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModTable::IsInitialized() const {

  return true;
}

void ModTable::Swap(ModTable* other) {
  if (other != this) {
    variable_mod_.Swap(&other->variable_mod_);
    static_mod_.Swap(&other->static_mod_);
    unique_deltas_.Swap(&other->unique_deltas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModTable_descriptor_;
  metadata.reflection = ModTable_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Header_FileType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_FileType_descriptor_;
}
bool Header_FileType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Header_FileType Header::RAW_PROTEINS;
const Header_FileType Header::PEPTIDES;
const Header_FileType Header::SPECTRA;
const Header_FileType Header::PARAMS;
const Header_FileType Header::MOD_TABLE;
const Header_FileType Header::RESULTS;
const Header_FileType Header::AUX_LOCATIONS;
const Header_FileType Header::FileType_MIN;
const Header_FileType Header::FileType_MAX;
const int Header::FileType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Header_Source::kFilenameFieldNumber;
const int Header_Source::kHeaderFieldNumber;
const int Header_Source::kFiletypeFieldNumber;
#endif  // !_MSC_VER

Header_Source::Header_Source()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Header_Source::InitAsDefaultInstance() {
  header_ = const_cast< ::pb::Header*>(&::pb::Header::default_instance());
}

Header_Source::Header_Source(const Header_Source& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Header_Source::SharedCtor() {
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  header_ = NULL;
  filetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header_Source::~Header_Source() {
  SharedDtor();
}

void Header_Source::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (filetype_ != &::google::protobuf::internal::kEmptyString) {
    delete filetype_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void Header_Source::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header_Source::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_Source_descriptor_;
}

const Header_Source& Header_Source::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_header_2eproto();
  return *default_instance_;
}

Header_Source* Header_Source::default_instance_ = NULL;

Header_Source* Header_Source::New() const {
  return new Header_Source;
}

void Header_Source::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    if (has_header()) {
      if (header_ != NULL) header_->::pb::Header::Clear();
    }
    if (has_filetype()) {
      if (filetype_ != &::google::protobuf::internal::kEmptyString) {
        filetype_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Header_Source::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_header;
        break;
      }

      // optional .pb.Header header = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_filetype;
        break;
      }

      // optional string filetype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filetype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filetype().data(), this->filetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Header_Source::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filename(), output);
  }

  // optional .pb.Header header = 2;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->header(), output);
  }

  // optional string filetype = 3;
  if (has_filetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filetype().data(), this->filetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->filetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Header_Source::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // optional .pb.Header header = 2;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->header(), target);
  }

  // optional string filetype = 3;
  if (has_filetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filetype().data(), this->filetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Header_Source::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional .pb.Header header = 2;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional string filetype = 3;
    if (has_filetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header_Source::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Header_Source* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Header_Source*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Header_Source::MergeFrom(const Header_Source& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_header()) {
      mutable_header()->::pb::Header::MergeFrom(from.header());
    }
    if (from.has_filetype()) {
      set_filetype(from.filetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Header_Source::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header_Source::CopyFrom(const Header_Source& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header_Source::IsInitialized() const {

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

void Header_Source::Swap(Header_Source* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(header_, other->header_);
    std::swap(filetype_, other->filetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Header_Source::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Header_Source_descriptor_;
  metadata.reflection = Header_Source_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

Header_RawProteinsHeader::Header_RawProteinsHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Header_RawProteinsHeader::InitAsDefaultInstance() {
}

Header_RawProteinsHeader::Header_RawProteinsHeader(const Header_RawProteinsHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Header_RawProteinsHeader::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header_RawProteinsHeader::~Header_RawProteinsHeader() {
  SharedDtor();
}

void Header_RawProteinsHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Header_RawProteinsHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header_RawProteinsHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_RawProteinsHeader_descriptor_;
}

const Header_RawProteinsHeader& Header_RawProteinsHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_header_2eproto();
  return *default_instance_;
}

Header_RawProteinsHeader* Header_RawProteinsHeader::default_instance_ = NULL;

Header_RawProteinsHeader* Header_RawProteinsHeader::New() const {
  return new Header_RawProteinsHeader;
}

void Header_RawProteinsHeader::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Header_RawProteinsHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Header_RawProteinsHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Header_RawProteinsHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Header_RawProteinsHeader::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header_RawProteinsHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Header_RawProteinsHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Header_RawProteinsHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Header_RawProteinsHeader::MergeFrom(const Header_RawProteinsHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Header_RawProteinsHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header_RawProteinsHeader::CopyFrom(const Header_RawProteinsHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header_RawProteinsHeader::IsInitialized() const {

  return true;
}

void Header_RawProteinsHeader::Swap(Header_RawProteinsHeader* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Header_RawProteinsHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Header_RawProteinsHeader_descriptor_;
  metadata.reflection = Header_RawProteinsHeader_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Header_PeptidesHeader::kMinMassFieldNumber;
const int Header_PeptidesHeader::kMaxMassFieldNumber;
const int Header_PeptidesHeader::kMinLengthFieldNumber;
const int Header_PeptidesHeader::kMaxLengthFieldNumber;
const int Header_PeptidesHeader::kEnzymeFieldNumber;
const int Header_PeptidesHeader::kFullDigestionFieldNumber;
const int Header_PeptidesHeader::kMaxMissedCleavagesFieldNumber;
const int Header_PeptidesHeader::kMonoisotopicPrecursorFieldNumber;
const int Header_PeptidesHeader::kHasPeaksFieldNumber;
const int Header_PeptidesHeader::kDownselectFractionFieldNumber;
const int Header_PeptidesHeader::kModsFieldNumber;
const int Header_PeptidesHeader::kDecoysFieldNumber;
#endif  // !_MSC_VER

Header_PeptidesHeader::Header_PeptidesHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Header_PeptidesHeader::InitAsDefaultInstance() {
  mods_ = const_cast< ::pb::ModTable*>(&::pb::ModTable::default_instance());
}

Header_PeptidesHeader::Header_PeptidesHeader(const Header_PeptidesHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Header_PeptidesHeader::SharedCtor() {
  _cached_size_ = 0;
  min_mass_ = 0;
  max_mass_ = 0;
  min_length_ = 0;
  max_length_ = 0;
  enzyme_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  full_digestion_ = false;
  max_missed_cleavages_ = 0;
  monoisotopic_precursor_ = false;
  has_peaks_ = false;
  downselect_fraction_ = 0;
  mods_ = NULL;
  decoys_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header_PeptidesHeader::~Header_PeptidesHeader() {
  SharedDtor();
}

void Header_PeptidesHeader::SharedDtor() {
  if (enzyme_ != &::google::protobuf::internal::kEmptyString) {
    delete enzyme_;
  }
  if (this != default_instance_) {
    delete mods_;
  }
}

void Header_PeptidesHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header_PeptidesHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_PeptidesHeader_descriptor_;
}

const Header_PeptidesHeader& Header_PeptidesHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_header_2eproto();
  return *default_instance_;
}

Header_PeptidesHeader* Header_PeptidesHeader::default_instance_ = NULL;

Header_PeptidesHeader* Header_PeptidesHeader::New() const {
  return new Header_PeptidesHeader;
}

void Header_PeptidesHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    min_mass_ = 0;
    max_mass_ = 0;
    min_length_ = 0;
    max_length_ = 0;
    if (has_enzyme()) {
      if (enzyme_ != &::google::protobuf::internal::kEmptyString) {
        enzyme_->clear();
      }
    }
    full_digestion_ = false;
    max_missed_cleavages_ = 0;
    monoisotopic_precursor_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    has_peaks_ = false;
    downselect_fraction_ = 0;
    if (has_mods()) {
      if (mods_ != NULL) mods_->::pb::ModTable::Clear();
    }
    decoys_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Header_PeptidesHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double min_mass = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_mass_)));
          set_has_min_mass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_max_mass;
        break;
      }

      // optional double max_mass = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_max_mass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_mass_)));
          set_has_max_mass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_min_length;
        break;
      }

      // optional int32 min_length = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_length_)));
          set_has_min_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_max_length;
        break;
      }

      // optional int32 max_length = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_length_)));
          set_has_max_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_enzyme;
        break;
      }

      // optional string enzyme = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enzyme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enzyme()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->enzyme().data(), this->enzyme().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_full_digestion;
        break;
      }

      // optional bool full_digestion = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_full_digestion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &full_digestion_)));
          set_has_full_digestion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_decoys;
        break;
      }

      // optional int32 decoys = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_decoys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decoys_)));
          set_has_decoys();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_has_peaks;
        break;
      }

      // optional bool has_peaks = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_peaks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_peaks_)));
          set_has_has_peaks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_downselect_fraction;
        break;
      }

      // optional double downselect_fraction = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_downselect_fraction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &downselect_fraction_)));
          set_has_downselect_fraction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_mods;
        break;
      }

      // optional .pb.ModTable mods = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_monoisotopic_precursor;
        break;
      }

      // optional bool monoisotopic_precursor = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monoisotopic_precursor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &monoisotopic_precursor_)));
          set_has_monoisotopic_precursor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_max_missed_cleavages;
        break;
      }

      // optional int32 max_missed_cleavages = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_missed_cleavages:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_missed_cleavages_)));
          set_has_max_missed_cleavages();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Header_PeptidesHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double min_mass = 3;
  if (has_min_mass()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->min_mass(), output);
  }

  // optional double max_mass = 4;
  if (has_max_mass()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->max_mass(), output);
  }

  // optional int32 min_length = 5;
  if (has_min_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->min_length(), output);
  }

  // optional int32 max_length = 6;
  if (has_max_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_length(), output);
  }

  // optional string enzyme = 7;
  if (has_enzyme()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->enzyme().data(), this->enzyme().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->enzyme(), output);
  }

  // optional bool full_digestion = 8;
  if (has_full_digestion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->full_digestion(), output);
  }

  // optional int32 decoys = 9;
  if (has_decoys()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->decoys(), output);
  }

  // optional bool has_peaks = 10;
  if (has_has_peaks()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->has_peaks(), output);
  }

  // optional double downselect_fraction = 11;
  if (has_downselect_fraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->downselect_fraction(), output);
  }

  // optional .pb.ModTable mods = 12;
  if (has_mods()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->mods(), output);
  }

  // optional bool monoisotopic_precursor = 13;
  if (has_monoisotopic_precursor()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->monoisotopic_precursor(), output);
  }

  // optional int32 max_missed_cleavages = 14;
  if (has_max_missed_cleavages()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->max_missed_cleavages(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Header_PeptidesHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double min_mass = 3;
  if (has_min_mass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->min_mass(), target);
  }

  // optional double max_mass = 4;
  if (has_max_mass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->max_mass(), target);
  }

  // optional int32 min_length = 5;
  if (has_min_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->min_length(), target);
  }

  // optional int32 max_length = 6;
  if (has_max_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_length(), target);
  }

  // optional string enzyme = 7;
  if (has_enzyme()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->enzyme().data(), this->enzyme().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->enzyme(), target);
  }

  // optional bool full_digestion = 8;
  if (has_full_digestion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->full_digestion(), target);
  }

  // optional int32 decoys = 9;
  if (has_decoys()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->decoys(), target);
  }

  // optional bool has_peaks = 10;
  if (has_has_peaks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->has_peaks(), target);
  }

  // optional double downselect_fraction = 11;
  if (has_downselect_fraction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->downselect_fraction(), target);
  }

  // optional .pb.ModTable mods = 12;
  if (has_mods()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->mods(), target);
  }

  // optional bool monoisotopic_precursor = 13;
  if (has_monoisotopic_precursor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->monoisotopic_precursor(), target);
  }

  // optional int32 max_missed_cleavages = 14;
  if (has_max_missed_cleavages()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->max_missed_cleavages(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Header_PeptidesHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double min_mass = 3;
    if (has_min_mass()) {
      total_size += 1 + 8;
    }

    // optional double max_mass = 4;
    if (has_max_mass()) {
      total_size += 1 + 8;
    }

    // optional int32 min_length = 5;
    if (has_min_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_length());
    }

    // optional int32 max_length = 6;
    if (has_max_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_length());
    }

    // optional string enzyme = 7;
    if (has_enzyme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->enzyme());
    }

    // optional bool full_digestion = 8;
    if (has_full_digestion()) {
      total_size += 1 + 1;
    }

    // optional int32 max_missed_cleavages = 14;
    if (has_max_missed_cleavages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_missed_cleavages());
    }

    // optional bool monoisotopic_precursor = 13;
    if (has_monoisotopic_precursor()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool has_peaks = 10;
    if (has_has_peaks()) {
      total_size += 1 + 1;
    }

    // optional double downselect_fraction = 11;
    if (has_downselect_fraction()) {
      total_size += 1 + 8;
    }

    // optional .pb.ModTable mods = 12;
    if (has_mods()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mods());
    }

    // optional int32 decoys = 9;
    if (has_decoys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decoys());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header_PeptidesHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Header_PeptidesHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Header_PeptidesHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Header_PeptidesHeader::MergeFrom(const Header_PeptidesHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min_mass()) {
      set_min_mass(from.min_mass());
    }
    if (from.has_max_mass()) {
      set_max_mass(from.max_mass());
    }
    if (from.has_min_length()) {
      set_min_length(from.min_length());
    }
    if (from.has_max_length()) {
      set_max_length(from.max_length());
    }
    if (from.has_enzyme()) {
      set_enzyme(from.enzyme());
    }
    if (from.has_full_digestion()) {
      set_full_digestion(from.full_digestion());
    }
    if (from.has_max_missed_cleavages()) {
      set_max_missed_cleavages(from.max_missed_cleavages());
    }
    if (from.has_monoisotopic_precursor()) {
      set_monoisotopic_precursor(from.monoisotopic_precursor());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_has_peaks()) {
      set_has_peaks(from.has_peaks());
    }
    if (from.has_downselect_fraction()) {
      set_downselect_fraction(from.downselect_fraction());
    }
    if (from.has_mods()) {
      mutable_mods()->::pb::ModTable::MergeFrom(from.mods());
    }
    if (from.has_decoys()) {
      set_decoys(from.decoys());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Header_PeptidesHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header_PeptidesHeader::CopyFrom(const Header_PeptidesHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header_PeptidesHeader::IsInitialized() const {

  return true;
}

void Header_PeptidesHeader::Swap(Header_PeptidesHeader* other) {
  if (other != this) {
    std::swap(min_mass_, other->min_mass_);
    std::swap(max_mass_, other->max_mass_);
    std::swap(min_length_, other->min_length_);
    std::swap(max_length_, other->max_length_);
    std::swap(enzyme_, other->enzyme_);
    std::swap(full_digestion_, other->full_digestion_);
    std::swap(max_missed_cleavages_, other->max_missed_cleavages_);
    std::swap(monoisotopic_precursor_, other->monoisotopic_precursor_);
    std::swap(has_peaks_, other->has_peaks_);
    std::swap(downselect_fraction_, other->downselect_fraction_);
    std::swap(mods_, other->mods_);
    std::swap(decoys_, other->decoys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Header_PeptidesHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Header_PeptidesHeader_descriptor_;
  metadata.reflection = Header_PeptidesHeader_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Header_SpectraHeader::kSortedFieldNumber;
#endif  // !_MSC_VER

Header_SpectraHeader::Header_SpectraHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Header_SpectraHeader::InitAsDefaultInstance() {
}

Header_SpectraHeader::Header_SpectraHeader(const Header_SpectraHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Header_SpectraHeader::SharedCtor() {
  _cached_size_ = 0;
  sorted_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header_SpectraHeader::~Header_SpectraHeader() {
  SharedDtor();
}

void Header_SpectraHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Header_SpectraHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header_SpectraHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_SpectraHeader_descriptor_;
}

const Header_SpectraHeader& Header_SpectraHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_header_2eproto();
  return *default_instance_;
}

Header_SpectraHeader* Header_SpectraHeader::default_instance_ = NULL;

Header_SpectraHeader* Header_SpectraHeader::New() const {
  return new Header_SpectraHeader;
}

void Header_SpectraHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sorted_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Header_SpectraHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool sorted = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sorted_)));
          set_has_sorted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Header_SpectraHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool sorted = 2;
  if (has_sorted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->sorted(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Header_SpectraHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool sorted = 2;
  if (has_sorted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->sorted(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Header_SpectraHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool sorted = 2;
    if (has_sorted()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header_SpectraHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Header_SpectraHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Header_SpectraHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Header_SpectraHeader::MergeFrom(const Header_SpectraHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sorted()) {
      set_sorted(from.sorted());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Header_SpectraHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header_SpectraHeader::CopyFrom(const Header_SpectraHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header_SpectraHeader::IsInitialized() const {

  return true;
}

void Header_SpectraHeader::Swap(Header_SpectraHeader* other) {
  if (other != this) {
    std::swap(sorted_, other->sorted_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Header_SpectraHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Header_SpectraHeader_descriptor_;
  metadata.reflection = Header_SpectraHeader_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Header_ResultsHeader::kMassWindowFieldNumber;
const int Header_ResultsHeader::kTopMatchesFieldNumber;
const int Header_ResultsHeader::kPeptidesHeaderFieldNumber;
#endif  // !_MSC_VER

Header_ResultsHeader::Header_ResultsHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Header_ResultsHeader::InitAsDefaultInstance() {
  peptides_header_ = const_cast< ::pb::Header_PeptidesHeader*>(&::pb::Header_PeptidesHeader::default_instance());
}

Header_ResultsHeader::Header_ResultsHeader(const Header_ResultsHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Header_ResultsHeader::SharedCtor() {
  _cached_size_ = 0;
  mass_window_ = 0;
  top_matches_ = 0;
  peptides_header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header_ResultsHeader::~Header_ResultsHeader() {
  SharedDtor();
}

void Header_ResultsHeader::SharedDtor() {
  if (this != default_instance_) {
    delete peptides_header_;
  }
}

void Header_ResultsHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header_ResultsHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_ResultsHeader_descriptor_;
}

const Header_ResultsHeader& Header_ResultsHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_header_2eproto();
  return *default_instance_;
}

Header_ResultsHeader* Header_ResultsHeader::default_instance_ = NULL;

Header_ResultsHeader* Header_ResultsHeader::New() const {
  return new Header_ResultsHeader;
}

void Header_ResultsHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mass_window_ = 0;
    top_matches_ = 0;
    if (has_peptides_header()) {
      if (peptides_header_ != NULL) peptides_header_->::pb::Header_PeptidesHeader::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Header_ResultsHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double mass_window = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mass_window_)));
          set_has_mass_window();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_top_matches;
        break;
      }

      // optional int32 top_matches = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_top_matches:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_matches_)));
          set_has_top_matches();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_peptides_header;
        break;
      }

      // optional .pb.Header.PeptidesHeader peptides_header = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_peptides_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peptides_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Header_ResultsHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double mass_window = 1;
  if (has_mass_window()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->mass_window(), output);
  }

  // optional int32 top_matches = 2;
  if (has_top_matches()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->top_matches(), output);
  }

  // optional .pb.Header.PeptidesHeader peptides_header = 3;
  if (has_peptides_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->peptides_header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Header_ResultsHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double mass_window = 1;
  if (has_mass_window()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->mass_window(), target);
  }

  // optional int32 top_matches = 2;
  if (has_top_matches()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->top_matches(), target);
  }

  // optional .pb.Header.PeptidesHeader peptides_header = 3;
  if (has_peptides_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->peptides_header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Header_ResultsHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double mass_window = 1;
    if (has_mass_window()) {
      total_size += 1 + 8;
    }

    // optional int32 top_matches = 2;
    if (has_top_matches()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->top_matches());
    }

    // optional .pb.Header.PeptidesHeader peptides_header = 3;
    if (has_peptides_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->peptides_header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header_ResultsHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Header_ResultsHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Header_ResultsHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Header_ResultsHeader::MergeFrom(const Header_ResultsHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mass_window()) {
      set_mass_window(from.mass_window());
    }
    if (from.has_top_matches()) {
      set_top_matches(from.top_matches());
    }
    if (from.has_peptides_header()) {
      mutable_peptides_header()->::pb::Header_PeptidesHeader::MergeFrom(from.peptides_header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Header_ResultsHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header_ResultsHeader::CopyFrom(const Header_ResultsHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header_ResultsHeader::IsInitialized() const {

  return true;
}

void Header_ResultsHeader::Swap(Header_ResultsHeader* other) {
  if (other != this) {
    std::swap(mass_window_, other->mass_window_);
    std::swap(top_matches_, other->top_matches_);
    std::swap(peptides_header_, other->peptides_header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Header_ResultsHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Header_ResultsHeader_descriptor_;
  metadata.reflection = Header_ResultsHeader_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

Header_AuxLocationsHeader::Header_AuxLocationsHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Header_AuxLocationsHeader::InitAsDefaultInstance() {
}

Header_AuxLocationsHeader::Header_AuxLocationsHeader(const Header_AuxLocationsHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Header_AuxLocationsHeader::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header_AuxLocationsHeader::~Header_AuxLocationsHeader() {
  SharedDtor();
}

void Header_AuxLocationsHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Header_AuxLocationsHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header_AuxLocationsHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_AuxLocationsHeader_descriptor_;
}

const Header_AuxLocationsHeader& Header_AuxLocationsHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_header_2eproto();
  return *default_instance_;
}

Header_AuxLocationsHeader* Header_AuxLocationsHeader::default_instance_ = NULL;

Header_AuxLocationsHeader* Header_AuxLocationsHeader::New() const {
  return new Header_AuxLocationsHeader;
}

void Header_AuxLocationsHeader::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Header_AuxLocationsHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Header_AuxLocationsHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Header_AuxLocationsHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Header_AuxLocationsHeader::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header_AuxLocationsHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Header_AuxLocationsHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Header_AuxLocationsHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Header_AuxLocationsHeader::MergeFrom(const Header_AuxLocationsHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Header_AuxLocationsHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header_AuxLocationsHeader::CopyFrom(const Header_AuxLocationsHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header_AuxLocationsHeader::IsInitialized() const {

  return true;
}

void Header_AuxLocationsHeader::Swap(Header_AuxLocationsHeader* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Header_AuxLocationsHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Header_AuxLocationsHeader_descriptor_;
  metadata.reflection = Header_AuxLocationsHeader_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Header::kSourceFieldNumber;
const int Header::kFileTypeFieldNumber;
const int Header::kRawProteinsHeaderFieldNumber;
const int Header::kPeptidesHeaderFieldNumber;
const int Header::kSpectraHeaderFieldNumber;
const int Header::kResultsHeaderFieldNumber;
const int Header::kAuxLocsHeaderFieldNumber;
const int Header::kCommandLineFieldNumber;
#endif  // !_MSC_VER

Header::Header()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Header::InitAsDefaultInstance() {
  raw_proteins_header_ = const_cast< ::pb::Header_RawProteinsHeader*>(&::pb::Header_RawProteinsHeader::default_instance());
  peptides_header_ = const_cast< ::pb::Header_PeptidesHeader*>(&::pb::Header_PeptidesHeader::default_instance());
  spectra_header_ = const_cast< ::pb::Header_SpectraHeader*>(&::pb::Header_SpectraHeader::default_instance());
  results_header_ = const_cast< ::pb::Header_ResultsHeader*>(&::pb::Header_ResultsHeader::default_instance());
  aux_locs_header_ = const_cast< ::pb::Header_AuxLocationsHeader*>(&::pb::Header_AuxLocationsHeader::default_instance());
}

Header::Header(const Header& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Header::SharedCtor() {
  _cached_size_ = 0;
  file_type_ = 0;
  raw_proteins_header_ = NULL;
  peptides_header_ = NULL;
  spectra_header_ = NULL;
  results_header_ = NULL;
  aux_locs_header_ = NULL;
  command_line_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header::~Header() {
  SharedDtor();
}

void Header::SharedDtor() {
  if (command_line_ != &::google::protobuf::internal::kEmptyString) {
    delete command_line_;
  }
  if (this != default_instance_) {
    delete raw_proteins_header_;
    delete peptides_header_;
    delete spectra_header_;
    delete results_header_;
    delete aux_locs_header_;
  }
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_descriptor_;
}

const Header& Header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_header_2eproto();
  return *default_instance_;
}

Header* Header::default_instance_ = NULL;

Header* Header::New() const {
  return new Header;
}

void Header::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    file_type_ = 0;
    if (has_raw_proteins_header()) {
      if (raw_proteins_header_ != NULL) raw_proteins_header_->::pb::Header_RawProteinsHeader::Clear();
    }
    if (has_peptides_header()) {
      if (peptides_header_ != NULL) peptides_header_->::pb::Header_PeptidesHeader::Clear();
    }
    if (has_spectra_header()) {
      if (spectra_header_ != NULL) spectra_header_->::pb::Header_SpectraHeader::Clear();
    }
    if (has_results_header()) {
      if (results_header_ != NULL) results_header_->::pb::Header_ResultsHeader::Clear();
    }
    if (has_aux_locs_header()) {
      if (aux_locs_header_ != NULL) aux_locs_header_->::pb::Header_AuxLocationsHeader::Clear();
    }
    if (has_command_line()) {
      if (command_line_ != &::google::protobuf::internal::kEmptyString) {
        command_line_->clear();
      }
    }
  }
  source_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.Header.Source source = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_source()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_source;
        if (input->ExpectTag(16)) goto parse_file_type;
        break;
      }

      // required .pb.Header.FileType file_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::Header_FileType_IsValid(value)) {
            set_file_type(static_cast< ::pb::Header_FileType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_raw_proteins_header;
        break;
      }

      // optional .pb.Header.RawProteinsHeader raw_proteins_header = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_raw_proteins_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_raw_proteins_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_peptides_header;
        break;
      }

      // optional .pb.Header.PeptidesHeader peptides_header = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_peptides_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peptides_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_spectra_header;
        break;
      }

      // optional .pb.Header.SpectraHeader spectra_header = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spectra_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spectra_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_results_header;
        break;
      }

      // optional .pb.Header.ResultsHeader results_header = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_results_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_results_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_aux_locs_header;
        break;
      }

      // optional .pb.Header.AuxLocationsHeader aux_locs_header = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aux_locs_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aux_locs_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_command_line;
        break;
      }

      // optional string command_line = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command_line:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command_line()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->command_line().data(), this->command_line().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pb.Header.Source source = 1;
  for (int i = 0; i < this->source_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->source(i), output);
  }

  // required .pb.Header.FileType file_type = 2;
  if (has_file_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->file_type(), output);
  }

  // optional .pb.Header.RawProteinsHeader raw_proteins_header = 3;
  if (has_raw_proteins_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->raw_proteins_header(), output);
  }

  // optional .pb.Header.PeptidesHeader peptides_header = 4;
  if (has_peptides_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->peptides_header(), output);
  }

  // optional .pb.Header.SpectraHeader spectra_header = 5;
  if (has_spectra_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->spectra_header(), output);
  }

  // optional .pb.Header.ResultsHeader results_header = 6;
  if (has_results_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->results_header(), output);
  }

  // optional .pb.Header.AuxLocationsHeader aux_locs_header = 7;
  if (has_aux_locs_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->aux_locs_header(), output);
  }

  // optional string command_line = 8;
  if (has_command_line()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command_line().data(), this->command_line().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->command_line(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Header::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .pb.Header.Source source = 1;
  for (int i = 0; i < this->source_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->source(i), target);
  }

  // required .pb.Header.FileType file_type = 2;
  if (has_file_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->file_type(), target);
  }

  // optional .pb.Header.RawProteinsHeader raw_proteins_header = 3;
  if (has_raw_proteins_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->raw_proteins_header(), target);
  }

  // optional .pb.Header.PeptidesHeader peptides_header = 4;
  if (has_peptides_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->peptides_header(), target);
  }

  // optional .pb.Header.SpectraHeader spectra_header = 5;
  if (has_spectra_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->spectra_header(), target);
  }

  // optional .pb.Header.ResultsHeader results_header = 6;
  if (has_results_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->results_header(), target);
  }

  // optional .pb.Header.AuxLocationsHeader aux_locs_header = 7;
  if (has_aux_locs_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->aux_locs_header(), target);
  }

  // optional string command_line = 8;
  if (has_command_line()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command_line().data(), this->command_line().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->command_line(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Header::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .pb.Header.FileType file_type = 2;
    if (has_file_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->file_type());
    }

    // optional .pb.Header.RawProteinsHeader raw_proteins_header = 3;
    if (has_raw_proteins_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->raw_proteins_header());
    }

    // optional .pb.Header.PeptidesHeader peptides_header = 4;
    if (has_peptides_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->peptides_header());
    }

    // optional .pb.Header.SpectraHeader spectra_header = 5;
    if (has_spectra_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spectra_header());
    }

    // optional .pb.Header.ResultsHeader results_header = 6;
    if (has_results_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->results_header());
    }

    // optional .pb.Header.AuxLocationsHeader aux_locs_header = 7;
    if (has_aux_locs_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->aux_locs_header());
    }

    // optional string command_line = 8;
    if (has_command_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command_line());
    }

  }
  // repeated .pb.Header.Source source = 1;
  total_size += 1 * this->source_size();
  for (int i = 0; i < this->source_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->source(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Header* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Header*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
  GOOGLE_CHECK_NE(&from, this);
  source_.MergeFrom(from.source_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_file_type()) {
      set_file_type(from.file_type());
    }
    if (from.has_raw_proteins_header()) {
      mutable_raw_proteins_header()->::pb::Header_RawProteinsHeader::MergeFrom(from.raw_proteins_header());
    }
    if (from.has_peptides_header()) {
      mutable_peptides_header()->::pb::Header_PeptidesHeader::MergeFrom(from.peptides_header());
    }
    if (from.has_spectra_header()) {
      mutable_spectra_header()->::pb::Header_SpectraHeader::MergeFrom(from.spectra_header());
    }
    if (from.has_results_header()) {
      mutable_results_header()->::pb::Header_ResultsHeader::MergeFrom(from.results_header());
    }
    if (from.has_aux_locs_header()) {
      mutable_aux_locs_header()->::pb::Header_AuxLocationsHeader::MergeFrom(from.aux_locs_header());
    }
    if (from.has_command_line()) {
      set_command_line(from.command_line());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < source_size(); i++) {
    if (!this->source(i).IsInitialized()) return false;
  }
  return true;
}

void Header::Swap(Header* other) {
  if (other != this) {
    source_.Swap(&other->source_);
    std::swap(file_type_, other->file_type_);
    std::swap(raw_proteins_header_, other->raw_proteins_header_);
    std::swap(peptides_header_, other->peptides_header_);
    std::swap(spectra_header_, other->spectra_header_);
    std::swap(results_header_, other->results_header_);
    std::swap(aux_locs_header_, other->aux_locs_header_);
    std::swap(command_line_, other->command_line_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Header_descriptor_;
  metadata.reflection = Header_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
